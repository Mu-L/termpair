{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"View and control remote terminals from your browser with end-to-end encryption Documentation : https://cs01.github.io/termpair Source Code : https://github.com/cs01/termpair Try It : https://grassfedcode.com/termpair What is TermPair? TermPair lets developers securely share and control terminals in real time. Usage Start the TermPair server with termpair serve , or use the one already running at https://grassfedcode.com/termpair . > termpair serve --port 8000 INFO: Started server process [25289] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on http://localhost:8000 (Press CTRL+C to quit) INFO: ('127.0.0.1', 51924) - \"WebSocket /connect_to_terminal\" [accepted] Then share your terminal by running termpair share : > termpair share --port 8000 -------------------------------------------------------------------------------- Connection established with end-to-end encryption \ud83d\udd12 Sharing '/bin/bash' at http://localhost:8000/?terminal_id=fd96c0f84adc6be776872950e19caecc#GyMlK2LLTqvoyTNzJ+qwLg== Type 'exit' or close terminal to stop sharing. -------------------------------------------------------------------------------- You can share that URL with whoever you want. Note that anyone that has it can view and possibly control your terminal. The server multicasts terminal output to all browsers that connect to the session. Security TermPair uses 128 bit end-to-end encryption for all terminal input and output. The browser must be running in a secure context . This typically means running on localhost, or with secure http traffic (https). How it Works TermPair consists of three pieces: terminal client server browser client(s) First, the termpair server is started ( termpair serve ). The server acts as a router that blindly forwards encrypted data between TermPair terminal clients and connected browsers. It listens for termpair websocket connections from unix terminal clients, and maintains a mapping to any connected browsers. Before the TermPair client sends terminal output to the server, it encrypts it using a secret key so the server cannot read it. The server forwards that data to connected browsers. When the browsers receive the data, they use the secret key to decrypt and display the terminal output. The browser obtains the secret key via a part of the url that is not sent to the server. Likewise, when a browser sends input to the terminal, it is encrypted in the browser, forwarded from the server to the terminal, then decrypted in the terminal by TermPair, and finally written to the terminal's input. Run With Latest Version Use pipx to run the latest version without installing: Serve: > pipx run termpair serve Then share: > pipx run termpair share --open-browser Installation You can install using pipx or pip: > pipx install termpair or > pip install termpair CLI API > termpair --help usage: termpair [-h] [--version] {share,serve} ... View and control remote terminals from your browser positional arguments: {share,serve} optional arguments: -h, --help show this help message and exit --version To start the TermPair server: > termpair serve --help usage: termpair serve [-h] [--port PORT] [--host HOST] [--certfile CERTFILE] [--keyfile KEYFILE] Run termpair server to route messages between unix terminals and browsers. Run this before connecting any clients. It is recommended to encrypt communication by using SSL/TLS. To generate an SSL certificate and private key, run `openssl req -newkey rsa:2048 -nodes -keyout host.key -x509 -days 365 -out host.crt`. To skip questions and use defaults, add the `-batch` flag. You can ignore warnings about self-signed certificates since you know you just made it. Then use them, pass the '--certfile' and '--keyfile' arguments. optional arguments: -h, --help show this help message and exit --port PORT, -p PORT Port to run the server on (default: 8000) --host HOST Host to run the server on (0.0.0.0 exposes publicly) (default: localhost) --certfile CERTFILE, -c CERTFILE Path to SSL certificate file (commonly .crt extension) (default: None) --keyfile KEYFILE, -k KEYFILE Path to SSL private key .key file (commonly .key extension) (default: None) To share a terminal using the TermPair client: > termpair share --help usage: termpair share [-h] [--cmd CMD] [--port PORT] [--host HOST] [--no-browser-control] [--open-browser] Share your terminal session with one or more browsers. A termpair server must be running before using this command. optional arguments: -h, --help show this help message and exit --cmd CMD The command to run in this TermPair session. Defaults to the SHELL environment variable (default: /bin/bash) --port PORT, -p PORT port server is running on (default: None) --host HOST host server is running on (default: http://localhost) --no-browser-control, -n Do not allow browsers to control your terminal remotely (default: False) --open-browser, -b Open a browser tab to the terminal after you start sharing (default: False) System Requirements Python: 3.6+ Operating System: To view/control from the browser: All operating systems are supported. To run the server, termpair serve : Tested on Linux. Should work on macOS. Might work on Windows. To share your terminal, termpair share : Tested on Linux. Should work on macOS. Probably doesn't work on Windows.","title":"Overview"},{"location":"#_1","text":"","title":""},{"location":"#what-is-termpair","text":"TermPair lets developers securely share and control terminals in real time.","title":"What is TermPair?"},{"location":"#usage","text":"Start the TermPair server with termpair serve , or use the one already running at https://grassfedcode.com/termpair . > termpair serve --port 8000 INFO: Started server process [25289] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on http://localhost:8000 (Press CTRL+C to quit) INFO: ('127.0.0.1', 51924) - \"WebSocket /connect_to_terminal\" [accepted] Then share your terminal by running termpair share : > termpair share --port 8000 -------------------------------------------------------------------------------- Connection established with end-to-end encryption \ud83d\udd12 Sharing '/bin/bash' at http://localhost:8000/?terminal_id=fd96c0f84adc6be776872950e19caecc#GyMlK2LLTqvoyTNzJ+qwLg== Type 'exit' or close terminal to stop sharing. -------------------------------------------------------------------------------- You can share that URL with whoever you want. Note that anyone that has it can view and possibly control your terminal. The server multicasts terminal output to all browsers that connect to the session.","title":"Usage"},{"location":"#security","text":"TermPair uses 128 bit end-to-end encryption for all terminal input and output. The browser must be running in a secure context . This typically means running on localhost, or with secure http traffic (https).","title":"Security"},{"location":"#how-it-works","text":"TermPair consists of three pieces: terminal client server browser client(s) First, the termpair server is started ( termpair serve ). The server acts as a router that blindly forwards encrypted data between TermPair terminal clients and connected browsers. It listens for termpair websocket connections from unix terminal clients, and maintains a mapping to any connected browsers. Before the TermPair client sends terminal output to the server, it encrypts it using a secret key so the server cannot read it. The server forwards that data to connected browsers. When the browsers receive the data, they use the secret key to decrypt and display the terminal output. The browser obtains the secret key via a part of the url that is not sent to the server. Likewise, when a browser sends input to the terminal, it is encrypted in the browser, forwarded from the server to the terminal, then decrypted in the terminal by TermPair, and finally written to the terminal's input.","title":"How it Works"},{"location":"#run-with-latest-version","text":"Use pipx to run the latest version without installing: Serve: > pipx run termpair serve Then share: > pipx run termpair share --open-browser","title":"Run With Latest Version"},{"location":"#installation","text":"You can install using pipx or pip: > pipx install termpair or > pip install termpair","title":"Installation"},{"location":"#cli-api","text":"> termpair --help usage: termpair [-h] [--version] {share,serve} ... View and control remote terminals from your browser positional arguments: {share,serve} optional arguments: -h, --help show this help message and exit --version To start the TermPair server: > termpair serve --help usage: termpair serve [-h] [--port PORT] [--host HOST] [--certfile CERTFILE] [--keyfile KEYFILE] Run termpair server to route messages between unix terminals and browsers. Run this before connecting any clients. It is recommended to encrypt communication by using SSL/TLS. To generate an SSL certificate and private key, run `openssl req -newkey rsa:2048 -nodes -keyout host.key -x509 -days 365 -out host.crt`. To skip questions and use defaults, add the `-batch` flag. You can ignore warnings about self-signed certificates since you know you just made it. Then use them, pass the '--certfile' and '--keyfile' arguments. optional arguments: -h, --help show this help message and exit --port PORT, -p PORT Port to run the server on (default: 8000) --host HOST Host to run the server on (0.0.0.0 exposes publicly) (default: localhost) --certfile CERTFILE, -c CERTFILE Path to SSL certificate file (commonly .crt extension) (default: None) --keyfile KEYFILE, -k KEYFILE Path to SSL private key .key file (commonly .key extension) (default: None) To share a terminal using the TermPair client: > termpair share --help usage: termpair share [-h] [--cmd CMD] [--port PORT] [--host HOST] [--no-browser-control] [--open-browser] Share your terminal session with one or more browsers. A termpair server must be running before using this command. optional arguments: -h, --help show this help message and exit --cmd CMD The command to run in this TermPair session. Defaults to the SHELL environment variable (default: /bin/bash) --port PORT, -p PORT port server is running on (default: None) --host HOST host server is running on (default: http://localhost) --no-browser-control, -n Do not allow browsers to control your terminal remotely (default: False) --open-browser, -b Open a browser tab to the terminal after you start sharing (default: False)","title":"CLI API"},{"location":"#system-requirements","text":"Python: 3.6+ Operating System: To view/control from the browser: All operating systems are supported. To run the server, termpair serve : Tested on Linux. Should work on macOS. Might work on Windows. To share your terminal, termpair share : Tested on Linux. Should work on macOS. Probably doesn't work on Windows.","title":"System Requirements"},{"location":"changelog/","text":"0.1.1.0 Ensure error message is printed to browser's terminal if site is not served in a secure context (#39) Make default TermPair terminal client port 8000 to match default server port (#38) Always display port to connect to in browser's connection instructions 0.1.0.2 Change default sharing port to None due to difficulties sharing to port 80/reverse proxies Print port in web UI's sharing command 0.1.0.1 Remove debug message from server 0.1.0.0 Pin dependencies Change default sharing port to 8000 to match default server port 0.0.1.3 Upgrade xtermjs 0.0.1.2 Update landing page when terminal id is not provided 0.0.1.1 Fix pipx install link in frontend 0.0.1.0 Add end-to-end encryption Change termpair serve to allow browser control by default, and update CLI API by replacing -a flag with -n flag. 0.0.3.0 Use FastAPI on backend and update UI","title":"Changelog"},{"location":"changelog/#0110","text":"Ensure error message is printed to browser's terminal if site is not served in a secure context (#39) Make default TermPair terminal client port 8000 to match default server port (#38) Always display port to connect to in browser's connection instructions","title":"0.1.1.0"},{"location":"changelog/#0102","text":"Change default sharing port to None due to difficulties sharing to port 80/reverse proxies Print port in web UI's sharing command","title":"0.1.0.2"},{"location":"changelog/#0101","text":"Remove debug message from server","title":"0.1.0.1"},{"location":"changelog/#0100","text":"Pin dependencies Change default sharing port to 8000 to match default server port","title":"0.1.0.0"},{"location":"changelog/#0013","text":"Upgrade xtermjs","title":"0.0.1.3"},{"location":"changelog/#0012","text":"Update landing page when terminal id is not provided","title":"0.0.1.2"},{"location":"changelog/#0011","text":"Fix pipx install link in frontend","title":"0.0.1.1"},{"location":"changelog/#0010","text":"Add end-to-end encryption Change termpair serve to allow browser control by default, and update CLI API by replacing -a flag with -n flag.","title":"0.0.1.0"},{"location":"changelog/#0030","text":"Use FastAPI on backend and update UI","title":"0.0.3.0"},{"location":"contributing/","text":"Contributing guidelines We're glad to see you here! This short document should give you some hints to get started with contributing to TermPair. Getting started First, fork the repo and clone it to your computer, then read the section you're interested in. \ud83d\udc4d Contributing Python code Install nox , then run the server with: nox -s serve After the server is running, you can share your terminal to it: nox -s broadcast Then type exit to stop broadcasting. Contributing frontend code To modify frontend code, get yarn and run: make install_frontend to install dependencies. You'll then be able to build the frontend app using: make build_frontend The TermPair server does not need to be reloaded, so you can just refresh the webpage to view changes. Alternatively, changes that don't require an actively connected terminal can be tested much more easily with hot reloading by running: make watch_frontend Contributing documentation TermPair's documentation is built with MkDocs and the MkDocs Material theme and is in the docs/ directory. To view documentation locally, run: nox -s watch_docs Proposing changes If you've found a bug, have a feature request, or would like to contribute documentation, here's what you can do to have your change merged in: (Recommended) If the problem is non-trivial, you should open an issue to discuss it with maintainers. Work on a separate branch, and make sure tests pass before pushing them to the remote. Open a pull request with your changes.","title":"Contributing"},{"location":"contributing/#contributing-guidelines","text":"We're glad to see you here! This short document should give you some hints to get started with contributing to TermPair.","title":"Contributing guidelines"},{"location":"contributing/#getting-started","text":"First, fork the repo and clone it to your computer, then read the section you're interested in. \ud83d\udc4d","title":"Getting started"},{"location":"contributing/#contributing-python-code","text":"Install nox , then run the server with: nox -s serve After the server is running, you can share your terminal to it: nox -s broadcast Then type exit to stop broadcasting.","title":"Contributing Python code"},{"location":"contributing/#contributing-frontend-code","text":"To modify frontend code, get yarn and run: make install_frontend to install dependencies. You'll then be able to build the frontend app using: make build_frontend The TermPair server does not need to be reloaded, so you can just refresh the webpage to view changes. Alternatively, changes that don't require an actively connected terminal can be tested much more easily with hot reloading by running: make watch_frontend","title":"Contributing frontend code"},{"location":"contributing/#contributing-documentation","text":"TermPair's documentation is built with MkDocs and the MkDocs Material theme and is in the docs/ directory. To view documentation locally, run: nox -s watch_docs","title":"Contributing documentation"},{"location":"contributing/#proposing-changes","text":"If you've found a bug, have a feature request, or would like to contribute documentation, here's what you can do to have your change merged in: (Recommended) If the problem is non-trivial, you should open an issue to discuss it with maintainers. Work on a separate branch, and make sure tests pass before pushing them to the remote. Open a pull request with your changes.","title":"Proposing changes"}]}