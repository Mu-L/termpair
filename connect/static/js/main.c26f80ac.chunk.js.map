{"version":3,"sources":["events.tsx","App.tsx","logo.png","index.tsx","encryption.tsx"],"names":["requestTerminalDimensions","JSON","stringify","event","newBrowserConnected","publicKey","a","getPEMFromPublicKey","browser_public_key_pem","payload","sendCommandToTerminal","secretEncryptionKey","data","messageCount","aesEncrypt","requestKeyRotation","githubLogo","width","height","fill","className","fillRule","clipRule","d","TopBar","props","href","window","location","pathname","src","logo","alt","BottomBar","connected","status","terminalId","canType","title","terminalData","allow_browser_control","connectedClients","numClients","startTime","moment","broadcast_start_time_iso","format","terminalDimensions","terminalSize","rows","cols","ErrorBoundary","state","hasError","error","errorInfo","console","this","children","React","Component","cannotTypeMsg","host","protocol","hostname","port","termpairShareCommand","pipxTermpairShareCommand","CopyCommand","useState","clicked","setClicked","hovering","setHovering","command","text","onMouseEnter","onMouseLeave","onClick","setTimeout","LandingPageContent","terminalIdInput","setTerminalIdInput","customHostInput","setCustomHostInput","connectToUserTerminal","isStaticallyHosted","setTerminalId","URL","e","toast","dark","setCustomTermpairServer","inputClass","terminalIdInputEl","type","onChange","target","value","placeholder","onKeyPress","key","terminalServerUrlEl","canConnect","length","connectButton","staticLandingContent","regularServerContent","termpairDemoContent","toastStatus","debounce","redXtermText","App","setIsStaticallyHosted","terminalServerData","setTerminalServerData","setNumClients","rsaKeyPair","useRef","aesKeys","browser","unix","ivCount","maxIvCount","xtermWasOpened","setXtermWasOpened","setTerminalSize","resizeTimeout","setResizeTimeout","setStatus","prevStatus","setPrevStatus","defaultTermpairServer","URLSearchParams","search","get","customTermpairServer","termpairHttpServer","useEffect","toString","fetch","mode","ret","json","pong","isTermpairServer","fetchIsStaticallyHosted","termpairWebsocketServer","replace","Xterm","cursorBlink","macOptionIsMeta","scrollback","xterm","useLayoutEffect","el","document","getElementById","open","writeln","changeStatus","newStatus","indexOf","autoClose","_","Error","handleStatusChange","isSecureContext","generateRSAKeyPair","current","response","String","message","getTerminalData","clearTimeout","resize","terminal_id","privateKey","onDataDispose","connectWebsocketUrl","webSocket","WebSocket","attachCustomKeyEventHandler","terminal","sendInputToTerminal","customKeyEventHandler","ctrlKey","shiftKey","toLowerCase","navigator","clipboard","readText","then","toPaste","toCopy","getSelection","writeText","focus","getCustomKeyEventHandler","newInput","send","isIvExhausted","addEventListener","newBrowserMessage","onData","dispose","parse","encryptedBase64Payload","aesDecrypt","decryptedPayload","write","num_clients","decryptRSAMessage","Buffer","from","b64_pk_unix_aes_key","unixAesKeyData","getAESKey","b64_pk_browser_aes_key","browserAesKeyData","iv_count","max_iv_count","startIvCount","parseInt","b64_aes_secret_unix_key","newUnixAesKeyData","b64_aes_secret_browser_key","newBrowserAesKeyData","setupWebsocketConnection","showLandingPage","content","id","position","limit","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","StrictMode","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","ciphertext","decrypt","ab2str","buf","fromCharCode","apply","exportCryptoKey","exportKey","exported","exportedAsString","exportedAsBase64","btoa","pemExported","rawKeyData","usages","importKey","unixSecretAESKey","encryptedPayloadB64","ivAndPayload","iv","subarray","encryptedTerminalOutput","decryptedTerminalOutput","ivFromInteger","unshift","set","browserSecretAESKey","utf8Payload","encrypt","TextEncoder","encode","encryptedArrayBuffer","ivAndEncryptedPayload","_combineBuffers","base64EncryptedString","_arrayBufferToBase64","buffer1","buffer2","tmp","byteLength","buffer","bytes","binary","len","i"],"mappings":"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","file":"static/js/main.c26f80ac.chunk.js","sourcesContent":["import {\n  aesEncrypt,\n  exportCryptoKey as getPEMFromPublicKey,\n} from \"./encryption\";\n\nexport function requestTerminalDimensions() {\n  return JSON.stringify({ event: \"request_terminal_dimensions\" });\n}\nexport async function newBrowserConnected(\n  publicKey: CryptoKey\n): Promise<string> {\n  return JSON.stringify({\n    event: \"new_browser_connected\",\n    payload: {\n      browser_public_key_pem: await getPEMFromPublicKey(publicKey),\n    },\n  });\n}\n\nexport async function sendCommandToTerminal(\n  secretEncryptionKey: CryptoKey,\n  data: string,\n  messageCount: number\n) {\n  return JSON.stringify({\n    event: \"command\",\n    payload: await aesEncrypt(secretEncryptionKey, data, messageCount),\n  });\n}\n\nexport function requestKeyRotation() {\n  return JSON.stringify({\n    event: \"request_key_rotation\",\n  });\n}\n","import React, { useEffect, useState, useLayoutEffect, useRef } from \"react\";\nimport \"xterm/css/xterm.css\";\nimport logo from \"./logo.png\"; // logomakr.com/4N54oK\n// import { CogIcon } from \"@heroicons/react/solid\";\nimport { DuplicateIcon } from \"@heroicons/react/solid\";\nimport { Terminal as Xterm, IDisposable } from \"xterm\";\nimport moment from \"moment\";\nimport {\n  aesDecrypt,\n  generateRSAKeyPair,\n  decryptRSAMessage,\n  getAESKey,\n  isIvExhausted,\n} from \"./encryption\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// import { atom, useRecoilState } from \"recoil\";\nimport { debounce } from \"debounce\";\nimport {\n  newBrowserConnected,\n  requestKeyRotation,\n  requestTerminalDimensions,\n  sendCommandToTerminal,\n} from \"./events\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nconst githubLogo = (\n  <svg width=\"24\" height=\"24\" fill=\"currentColor\" className=\"text-white mr-3 \">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M12 2C6.477 2 2 6.463 2 11.97c0 4.404 2.865 8.14 6.839 9.458.5.092.682-.216.682-.48 0-.236-.008-.864-.013-1.695-2.782.602-3.369-1.337-3.369-1.337-.454-1.151-1.11-1.458-1.11-1.458-.908-.618.069-.606.069-.606 1.003.07 1.531 1.027 1.531 1.027.892 1.524 2.341 1.084 2.91.828.092-.643.35-1.083.636-1.332-2.22-.251-4.555-1.107-4.555-4.927 0-1.088.39-1.979 1.029-2.675-.103-.252-.446-1.266.098-2.638 0 0 .84-.268 2.75 1.022A9.606 9.606 0 0112 6.82c.85.004 1.705.114 2.504.336 1.909-1.29 2.747-1.022 2.747-1.022.546 1.372.202 2.386.1 2.638.64.696 1.028 1.587 1.028 2.675 0 3.83-2.339 4.673-4.566 4.92.359.307.678.915.678 1.846 0 1.332-.012 2.407-.012 2.734 0 .267.18.577.688.48C19.137 20.107 22 16.373 22 11.969 22 6.463 17.522 2 12 2z\"\n    ></path>\n  </svg>\n);\n\n// const showSettings = atom({\n//   key: \"showSettings\",\n//   default: false,\n// });\n\n// function Settings(props: any) {\n//   const [showSetting, setShowSettings] = useRecoilState(showSettings);\n//   if (!showSetting) {\n//     return null;\n//   }\n//   return (\n//     <div\n//       className=\"w-full h-full bg-gray-900 absolute bg-opacity-90  text-black\"\n//       style={{ zIndex: 2000 }}\n//     >\n//       <div className=\"w-11/12 h-5/6 m-10 p-5 bg-gray-400 flex items-center flex-col\">\n//         <div className=\"text-xl mb-10\">TermPair Settings</div>\n//         <div className=\"flex-grow\">Body</div>\n//         <div>\n//           <button\n//             className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\"\n//             onClick={() => setShowSettings(false)}\n//           >\n//             Close\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nfunction TopBar(props: any) {\n  return (\n    <div className=\"flex bg-black h-10 items-center justify-between\">\n      <div className=\"h-full\">\n        <a href={window.location.pathname}>\n          <img className=\"h-full\" src={logo} alt=\"logo\" />\n        </a>\n      </div>\n      <a href=\"https://github.com/cs01/termpair\">{githubLogo}</a>\n      {/* <div className=\"text-white m-5\">\n        <div className=\"my-auto\">\n          <button\n            className=\"my-auto\"\n            onClick={() => setShowSettings(!showSetting)}\n          >\n            <CogIcon className=\"h-6 w-6 text-white\" />\n          </button>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n\nfunction BottomBar(props: {\n  status: Status;\n  terminalData: Nullable<TerminalServerData>;\n  terminalId: Nullable<string>;\n  terminalSize: TerminalSize;\n  numClients: number;\n}) {\n  const connected = props.status === \"Connected\";\n  const hasTerminalId = props.terminalId != null;\n  const status = hasTerminalId ? <div>{props.status}</div> : null;\n\n  const canType = connected ? (\n    <div\n      title=\"Whether you are allowed to send data to the terminal's input.\n    This setting is controlled when initially sharing the terminal, and cannot be changed\n    after sharing has begun.\"\n    >\n      {props.terminalData?.allow_browser_control && props.status === \"Connected\"\n        ? \"can type\"\n        : \"cannot type\"}\n    </div>\n  ) : null;\n\n  const connectedClients = connected ? (\n    <div title=\"Number of other browsers connected to this terminal\">\n      {props.numClients ? props.numClients : \"0\"} Connected Client(s)\n    </div>\n  ) : null;\n\n  const startTime = connected ? (\n    <div>\n      Started at{\" \"}\n      {moment(props.terminalData?.broadcast_start_time_iso).format(\n        \"h:mm a on MMM Do, YYYY\"\n      )}\n    </div>\n  ) : null;\n\n  const terminalDimensions = connected ? (\n    <span title=\"Dimensions of terminal, rows x cols\">\n      {props.terminalSize.rows}x{props.terminalSize.cols}\n    </span>\n  ) : null;\n\n  return (\n    <>\n      <div\n        className={`flex ${\n          connected ? \"bg-green-900\" : \"bg-red-900\"\n        }   justify-evenly text-gray-300`}\n      >\n        {status}\n        {terminalDimensions}\n        {canType}\n        {connectedClients}\n        {startTime}\n      </div>\n      <div className=\"flex bg-black  justify-evenly text-gray-300 py-5\">\n        <div>\n          <a href=\"https://chadsmith.dev\">chadsmith.dev</a> |{\" \"}\n          <a href=\"https://github.com/cs01/termpair\">GitHub</a> |{\" \"}\n          <a href=\"https://github.com/cs01\">Other Projects</a>\n        </div>\n      </div>\n    </>\n  );\n}\n\nclass ErrorBoundary extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    console.error(error);\n    console.error(errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1 className=\"text-white\">Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nconst cannotTypeMsg =\n  \"Terminal was shared in read only mode. Unable to send data to terminal's input.\";\n\nconst host = `${window.location.protocol}//${window.location.hostname}${window.location.pathname}`;\nlet port = window.location.port;\nif (!window.location.port) {\n  if (window.location.protocol === \"https:\") {\n    port = \"443\";\n  } else {\n    port = \"80\";\n  }\n}\nconst termpairShareCommand = `termpair share --host \"${host}\" --port ${port}`;\nconst pipxTermpairShareCommand = `pipx run ${termpairShareCommand}`;\n\nfunction CopyCommand(props: { command: string }) {\n  const [clicked, setClicked] = useState(false);\n  const [hovering, setHovering] = useState(false);\n  return (\n    <div className=\"flex\">\n      <code\n        className={`${\n          hovering || clicked ? \"bg-yellow-200\" : \"bg-gray-400\"\n        } text-black px-2 py-1 m-2`}\n      >\n        {props.command}\n      </code>\n      <CopyToClipboard text={props.command}>\n        <button\n          className=\"px-2\"\n          title=\"Copy command to clipboard\"\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          onClick={() => {\n            setClicked(true);\n            setTimeout(() => setClicked(false), 1500);\n          }}\n        >\n          <DuplicateIcon className=\"h-6 w-6 text-white\" />\n        </button>\n      </CopyToClipboard>\n      <span className=\"py-1 m-2\">{clicked ? \"Copied!\" : \"\"}</span>\n    </div>\n  );\n}\n\nfunction LandingPageContent(props: {\n  isStaticallyHosted: Nullable<boolean>;\n  setCustomTermpairServer: (customServer: string) => void;\n  setTerminalId: (newTerminalId: string) => void;\n}) {\n  const [terminalIdInput, setTerminalIdInput] = React.useState(\"\");\n  const [customHostInput, setCustomHostInput] = React.useState(\"\");\n  const connectToUserTerminal = () => {\n    if (!terminalIdInput) {\n      toast.dark(\"Terminal ID cannot be empty\");\n      return;\n    }\n    if (!props.isStaticallyHosted) {\n      props.setTerminalId(terminalIdInput);\n    }\n    if (!customHostInput) {\n      toast.dark(\"Host name cannot be empty\");\n      return;\n    }\n    try {\n      new URL(customHostInput);\n    } catch (e) {\n      toast.dark(`${customHostInput} is not a valid url`);\n      return;\n    }\n    props.setCustomTermpairServer(customHostInput);\n    props.setTerminalId(terminalIdInput);\n  };\n  const inputClass = \"text-black px-2 py-3 m-2 w-full font-mono\";\n\n  const terminalIdInputEl = (\n    <div\n      className=\"flex items-center\"\n      title=\"The unique Terminal ID the broadcasting terminal was provided when the sharing session began.\"\n    >\n      <span className=\"py-2 m-2 whitespace-nowrap text-xl\">Terminal ID</span>\n      <input\n        type=\"text\"\n        className={inputClass}\n        onChange={(event) => {\n          setTerminalIdInput(event.target.value);\n        }}\n        value={terminalIdInput}\n        placeholder=\"abcdef123456789abcded123456789\"\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            connectToUserTerminal();\n          }\n        }}\n      />\n    </div>\n  );\n  const terminalServerUrlEl = (\n    <div\n      className=\"flex items-center\"\n      title=\"The URL of an actual TermPair server that the terminal is broadcasting through.\"\n    >\n      <span className=\"py-2 m-2 whitespace-nowrap text-xl\">\n        TermPair Server URL\n      </span>\n      <input\n        type=\"text\"\n        className={inputClass}\n        placeholder=\"http://localhost:8000\"\n        onChange={(event) => {\n          setCustomHostInput(event.target.value);\n        }}\n        value={customHostInput}\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            connectToUserTerminal();\n          }\n        }}\n      />\n    </div>\n  );\n\n  const canConnect = props.isStaticallyHosted\n    ? terminalIdInput.length !== 0\n    : terminalIdInput.length !== 0 && customHostInput.length !== 0;\n\n  const connectButton = (\n    <div className=\"flex justify-end\">\n      <button\n        title=\"Connect to the specified Terminal\"\n        className={`bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full ${\n          canConnect ? \"\" : \"cursor-not-allowed\"\n        }`}\n        onClick={connectToUserTerminal}\n      >\n        Connect\n      </button>\n    </div>\n  );\n  const staticLandingContent = (\n    <div className=\"py-2\">\n      <div className=\"text-2xl py-2\">This page is statically hosted</div>\n      <div>\n        This is a static page serving the TermPair JavaScript app. It is\n        optional to use a statically served TermPair webapp, but it facilitates\n        easily building and self-serving to be certain the JavaScript app has\n        not been tampered with by an untrusted server.\n      </div>\n      <div className=\"mt-5\">\n        Connect to a broadcasting terminal by entering the fields below and\n        clicking Connect.\n      </div>\n\n      {terminalIdInputEl}\n      {terminalServerUrlEl}\n      {connectButton}\n    </div>\n  );\n\n  const regularServerContent = (\n    <>\n      <div className=\"py-2\">\n        <div className=\"text-xl  py-2\">Quick Start</div>\n        <div>\n          If you have TermPair installed, share a terminal with this host:\n        </div>\n        <CopyCommand command={termpairShareCommand} />\n        <div>Or if you have pipx, you can run TermPair via pipx:</div>\n        <CopyCommand command={pipxTermpairShareCommand} />\n      </div>\n      <div className=\"py-2\">\n        <div className=\"text-xl  py-2\">Install TermPair</div>\n        <div>Install with pipx</div>\n        <CopyCommand command=\"pipx install termpair\" />\n        <div>Or install with pip</div>\n        <CopyCommand command=\"pip install termpair --user\" />\n      </div>\n      <div className=\"py-2\">\n        <div className=\"text-xl  py-2\">Connecting to a Terminal?</div>\n        If a terminal is already broadcasting and you'd like to connect to it,\n        you don't need to install or run anything. Just enter the Terminal ID\n        below and click Connect.\n        {terminalIdInputEl}\n        {connectButton}\n      </div>\n    </>\n  );\n\n  const termpairDemoContent = (\n    <div className=\"py-2\">\n      <div className=\"text-xl  py-2\">TermPair Demo</div>\n      <div>\n        <img\n          alt=\"Screencast of TermPair\"\n          src=\"https://raw.githubusercontent.com/cs01/termpair/master/termpair_browser.gif\"\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"text-gray-300 max-w-3xl\">\n        <div className=\"py-2\">\n          <div className=\"text-3xl \">Welcome to TermPair!</div>\n          Easily share terminals with end-to-end encryption 🔒. Terminal data is\n          always encrypted before being routed through the server.{\" \"}\n          <a href=\"https://github.com/cs01/termpair\">Learn more.</a>\n        </div>\n        {props.isStaticallyHosted === null\n          ? null\n          : props.isStaticallyHosted === true\n          ? staticLandingContent\n          : regularServerContent}\n\n        {termpairDemoContent}\n      </div>\n    </div>\n  );\n}\ntype Status =\n  | null\n  | \"Connecting...\"\n  | \"Connected\"\n  | \"Disconnected\"\n  | \"Connection Error\"\n  | \"Terminal ID is invalid\"\n  | \"Browser is not running in a secure context\"\n  | \"No Terminal provided\"\n  | \"Failed to obtain encryption keys\"\n  | \"Ready for websocket connection\"\n  | \"Developer Error: RSA key not ready\"\n  | \"Failed to fetch terminal data\";\n\ntype TerminalServerData = {\n  terminal_id: string;\n  allow_browser_control: boolean;\n  num_clients: number;\n  broadcast_start_time_iso: string;\n};\n\ntype TerminalSize = {\n  rows: number;\n  cols: number;\n};\n\nconst toastStatus = debounce((status: any) => {\n  toast.dark(status);\n}, 500);\n\nfunction redXtermText(text: string): string {\n  return \"\\x1b[1;31m\" + text + \"\\x1b[0m\";\n}\n\nfunction handleStatusChange(\n  xterm: Xterm,\n  terminalId: Nullable<string>,\n  status: Status,\n  prevStatus: Status,\n  setPrevStatus: (prevStatus: Status) => void\n): void {\n  const noToast = [\"No Terminal provided\"];\n  if (status && noToast.indexOf(status) === -1) {\n    toastStatus(<div>Terminal status: {status}</div>);\n  }\n  setPrevStatus(status);\n\n  switch (status) {\n    case null:\n      break;\n    case \"Connected\":\n      xterm.writeln(\"Connection established with end-to-end encryption 🔒.\");\n      xterm.writeln(\n        \"The termpair server and third parties can't read transmitted data.\"\n      );\n      xterm.writeln(\"\");\n      xterm.writeln(\n        \"You can copy text with ctrl+shift+c or ctrl+shift+x, and paste with ctrl+shift+v.\"\n      );\n      xterm.writeln(\"\");\n      break;\n    case \"Disconnected\":\n      if (prevStatus === \"Connected\") {\n        xterm.writeln(redXtermText(\"Terminal session has ended\"));\n        xterm.writeln(\"\");\n      }\n      break;\n    case \"Terminal ID is invalid\":\n      xterm.writeln(\n        redXtermText(\n          `An invalid Terminal ID (${terminalId}) was provided. ` +\n            `Check that the session is still being broadcast and that the ID is entered correctly.`\n        )\n      );\n      xterm.writeln(\"\");\n      break;\n\n    case \"Failed to obtain encryption keys\":\n      xterm.writeln(\n        redXtermText(\n          `Failed to obtain symmetric encryption keys from the broadcasting terminal.`\n        )\n      );\n      xterm.writeln(\"\");\n      break;\n\n    case \"Developer Error: RSA key not ready\":\n      toast.dark(\n        <>\n          <div>\n            Unexpected error: RSA Public key is not ready at time of websocket\n            connection. Please file an issue.\n          </div>\n          <a href=\"https://github.com/cs01/termpair/issues\">\n            https://github.com/cs01/termpair/issues\n          </a>\n        </>,\n        { autoClose: false }\n      );\n      break;\n\n    case \"Browser is not running in a secure context\":\n      xterm.writeln(\n        redXtermText(\n          \"Fatal Error: TermPair only works on secure connections. Ensure url starts with https. \" +\n            \"See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts and `termpair serve --help` for more information.\"\n        )\n      );\n      xterm.writeln(\"\");\n      break;\n\n    case \"Connecting...\":\n      break;\n\n    case \"Connection Error\":\n      xterm.writeln(\n        redXtermText(\n          \"An error occurred in the websocket connection to the server. Connection has been closed.\"\n        )\n      );\n      break;\n\n    case \"No Terminal provided\":\n    case \"Failed to fetch terminal data\":\n    case \"Ready for websocket connection\":\n      break;\n\n    default:\n      ((_: \"Unhandled switch case\"): never => {\n        throw Error;\n      })(status);\n  }\n  return status as never;\n}\n\nfunction App() {\n  const [isStaticallyHosted, setIsStaticallyHosted] =\n    useState<Nullable<boolean>>(null);\n  const [terminalServerData, setTerminalServerData] =\n    useState<Nullable<TerminalServerData>>(null);\n  const [numClients, setNumClients] = useState(0);\n\n  const rsaKeyPair = useRef<Nullable<CryptoKeyPair>>(null);\n\n  const aesKeys = useRef<{\n    browser: Nullable<CryptoKey>;\n    unix: Nullable<CryptoKey>;\n    ivCount: Nullable<number>;\n    maxIvCount: Nullable<number>;\n  }>({\n    browser: null,\n    unix: null,\n    ivCount: null,\n    maxIvCount: null,\n  });\n  const [xtermWasOpened, setXtermWasOpened] = useState(false);\n  const [terminalSize, setTerminalSize] = useState<TerminalSize>({\n    rows: 20,\n    cols: 81,\n  });\n  const [resizeTimeout, setResizeTimeout] =\n    useState<Nullable<NodeJS.Timeout>>(null);\n  const [status, setStatus] = useState<Status>(null);\n  const [prevStatus, setPrevStatus] = useState<Status>(null);\n\n  const defaultTermpairServer = new URL(\n    `${window.location.protocol}//${window.location.hostname}:${window.location.port}${window.location.pathname}`\n  );\n  const [customTermpairServer, setCustomTermpairServer] = useState(\n    new URLSearchParams(window.location.search).get(\"termpair_server_url\")\n  );\n  const termpairHttpServer =\n    isStaticallyHosted === true ? customTermpairServer : defaultTermpairServer;\n\n  useEffect(() => {\n    if (isStaticallyHosted === true && customTermpairServer) {\n      toast.dark(\n        `Terminal data is being routed through ${customTermpairServer.toString()}`\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customTermpairServer]);\n\n  useEffect(() => {\n    const fetchIsStaticallyHosted = async () => {\n      try {\n        const ret = await fetch(defaultTermpairServer.toString() + \"ping\", {\n          mode: \"same-origin\",\n        });\n        const text = await ret.json();\n        const pong = text === \"pong\";\n        const isTermpairServer = ret.status === 200 && pong;\n        setIsStaticallyHosted(!isTermpairServer);\n      } catch (e) {\n        setIsStaticallyHosted(true);\n      }\n    };\n    fetchIsStaticallyHosted();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const termpairWebsocketServer = termpairHttpServer\n    ? new URL(termpairHttpServer.toString().replace(/^http/, \"ws\"))\n    : null;\n  const [xterm] = useState(\n    new Xterm({\n      cursorBlink: true,\n      macOptionIsMeta: true,\n      scrollback: 1000,\n    })\n  );\n  const [terminalId, setTerminalId] = useState(\n    new URLSearchParams(window.location.search).get(\"terminal_id\")\n  );\n\n  useLayoutEffect(() => {\n    if (xtermWasOpened) {\n      return;\n    }\n    const el = document.getElementById(\"terminal\");\n    if (!el) {\n      return;\n    }\n    xterm.open(el);\n    xterm.writeln(`Welcome to TermPair! https://github.com/cs01/termpair`);\n    xterm.writeln(\"\");\n    setXtermWasOpened(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status]);\n\n  const changeStatus = (newStatus: Status) => {\n    setStatus(newStatus);\n    handleStatusChange(xterm, terminalId, newStatus, prevStatus, setPrevStatus);\n  };\n\n  useEffect(() => {\n    async function getTerminalData() {\n      if (!terminalId) {\n        setTerminalServerData(null);\n        changeStatus(\"No Terminal provided\");\n        return;\n      }\n      if (!window.isSecureContext) {\n        changeStatus(\"Browser is not running in a secure context\");\n        return;\n      }\n      if (isStaticallyHosted && !customTermpairServer) {\n        toast.dark(\n          \"Page is statically hosted but no custom server was provided\"\n        );\n        return;\n      }\n      if (!termpairHttpServer) {\n        console.error(\"no termpair server\");\n        return;\n      }\n      rsaKeyPair.current = await generateRSAKeyPair();\n\n      try {\n        const response = await fetch(\n          new URL(`terminal/${terminalId}`, termpairHttpServer).toString()\n        );\n        if (response.status === 200) {\n          setTerminalServerData(await response.json());\n          setStatus(\"Ready for websocket connection\");\n        } else {\n          changeStatus(\"Terminal ID is invalid\");\n          setTerminalServerData(null);\n        }\n      } catch (e) {\n        changeStatus(`Failed to fetch terminal data`);\n        toast.dark(\n          `Error fetching terminal data from ${termpairHttpServer.toString()}. Is the URL correct? Error message: ${String(\n            e.message\n          )}`,\n\n          { autoClose: false }\n        );\n        setTerminalServerData(null);\n      }\n    }\n    getTerminalData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [terminalId]);\n\n  useEffect(() => {\n    if (resizeTimeout) {\n      clearTimeout(resizeTimeout);\n    }\n    setResizeTimeout(\n      setTimeout(() => {\n        xterm.resize(terminalSize.cols, terminalSize.rows);\n      }, 500)\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [terminalSize, xterm]);\n\n  useEffect(() => {\n    function setupWebsocketConnection() {\n      if (status !== \"Ready for websocket connection\") {\n        return;\n      }\n      if (\n        !(terminalServerData?.terminal_id && rsaKeyPair.current?.privateKey)\n      ) {\n        return;\n      }\n      if (!termpairWebsocketServer) {\n        return;\n      }\n      changeStatus(\"Connecting...\");\n      const connectWebsocketUrl = new URL(\n        `connect_browser_to_terminal?terminal_id=${terminalId}`,\n        termpairWebsocketServer\n      );\n      const webSocket = new WebSocket(connectWebsocketUrl.toString());\n\n      xterm.attachCustomKeyEventHandler(\n        getCustomKeyEventHandler(\n          xterm,\n          terminalServerData?.allow_browser_control,\n          async (newInput: any) => {\n            try {\n              if (\n                aesKeys.current.browser &&\n                aesKeys.current.ivCount &&\n                aesKeys.current.maxIvCount\n              ) {\n                webSocket.send(\n                  await sendCommandToTerminal(\n                    aesKeys.current.browser,\n                    newInput,\n                    aesKeys.current.ivCount++\n                  )\n                );\n                if (\n                  isIvExhausted(\n                    aesKeys.current.ivCount,\n                    aesKeys.current.maxIvCount\n                  )\n                ) {\n                  webSocket.send(requestKeyRotation());\n                  // don't want to request a new one\n                  // while the current request is being processed\n                  aesKeys.current.maxIvCount += 1000;\n                }\n              } else {\n                toast.dark(\n                  `Can't send ${newInput} since encryption key was not obtained. Wait and try again or refresh the page.`\n                );\n                return;\n              }\n            } catch (e) {\n              toast.dark(`Failed to send data to terminal ${e}`);\n            }\n          }\n        )\n      );\n      let onDataDispose: Nullable<IDisposable>;\n      webSocket.addEventListener(\"open\", async (event) => {\n        if (rsaKeyPair.current?.publicKey == null) {\n          changeStatus(\"Developer Error: RSA key not ready\");\n          return;\n        }\n\n        changeStatus(\"Connected\");\n        webSocket.send(requestTerminalDimensions());\n        const newBrowserMessage = await newBrowserConnected(\n          rsaKeyPair.current.publicKey\n        );\n        webSocket.send(newBrowserMessage);\n\n        /**\n         * Process user input when user types in terminal\n         */\n        onDataDispose = xterm.onData(async (newInput: any) => {\n          try {\n            if (terminalServerData.allow_browser_control === false) {\n              toastStatus(cannotTypeMsg);\n              return;\n            }\n            if (\n              aesKeys.current.browser != null &&\n              aesKeys.current.ivCount != null &&\n              aesKeys.current.maxIvCount != null\n            ) {\n              webSocket.send(\n                await sendCommandToTerminal(\n                  aesKeys.current.browser,\n                  newInput,\n                  aesKeys.current.ivCount++\n                )\n              );\n              if (\n                isIvExhausted(\n                  aesKeys.current.ivCount,\n                  aesKeys.current.maxIvCount\n                )\n              ) {\n                webSocket.send(requestKeyRotation());\n                aesKeys.current.maxIvCount += 1000;\n              }\n            } else {\n              toast.dark(\n                `cannot send ${newInput} because encryption key is missing`\n              );\n            }\n          } catch (e) {\n            toast.dark(`Failed to send data to terminal ${e}`);\n          }\n        });\n      });\n      webSocket.addEventListener(\"close\", (event) => {\n        if (onDataDispose) {\n          // stop trying to send data since the connection is closed\n          onDataDispose.dispose();\n        }\n\n        changeStatus(\"Disconnected\");\n        setNumClients(0);\n      });\n\n      webSocket.addEventListener(\"error\", (event) => {\n        if (onDataDispose) {\n          // stop trying to send data since the connection is closed\n          onDataDispose.dispose();\n        }\n\n        toast.dark(`Websocket Error: ${event}`);\n        console.error(event);\n        changeStatus(\"Connection Error\");\n        setNumClients(0);\n      });\n\n      webSocket.addEventListener(\"message\", async (message: any) => {\n        const data = JSON.parse(message.data);\n        if (data.event === \"new_output\") {\n          if (!aesKeys.current.unix) {\n            console.error(\n              \"Missing AES CryptoKey for unix terminal. Cannot decrypt message.\"\n            );\n            return;\n          }\n          const encryptedBase64Payload = data.payload;\n          const decryptedPayload = await aesDecrypt(\n            aesKeys.current.unix,\n            encryptedBase64Payload\n          );\n          xterm.write(decryptedPayload);\n        } else if (data.event === \"resize\") {\n          if (data.payload.cols && data.payload.rows) {\n            setTerminalSize({\n              cols: data.payload.cols,\n              rows: data.payload.rows,\n            });\n          }\n        } else if (data.event === \"num_clients\") {\n          const num_clients = data.payload;\n          setNumClients(num_clients);\n        } else if (data.event === \"aes_keys\") {\n          if (!rsaKeyPair?.current?.privateKey) {\n            return;\n          }\n          try {\n            const unixAesKeyData = await decryptRSAMessage(\n              rsaKeyPair.current.privateKey,\n              Buffer.from(data.payload.b64_pk_unix_aes_key, \"base64\")\n            );\n            aesKeys.current.unix = await getAESKey(unixAesKeyData, [\"decrypt\"]);\n\n            const browserAesKeyData = await decryptRSAMessage(\n              rsaKeyPair.current.privateKey,\n              Buffer.from(data.payload.b64_pk_browser_aes_key, \"base64\")\n            );\n            aesKeys.current.browser = await getAESKey(browserAesKeyData, [\n              \"encrypt\",\n            ]);\n            if (\n              data.payload.iv_count == null ||\n              data.payload.max_iv_count == null\n            ) {\n              console.error(\"missing required iv parameters\");\n              throw Error(\"missing required iv parameters\");\n            }\n            const startIvCount = (aesKeys.current.ivCount = parseInt(\n              data.payload.iv_count,\n              10\n            ));\n\n            const maxIvCount = (aesKeys.current.maxIvCount = parseInt(\n              data.payload.max_iv_count,\n              10\n            ));\n            if (maxIvCount < startIvCount) {\n              console.error(\n                `Initialized IV counter is below max value ${startIvCount} vs ${maxIvCount}`\n              );\n              aesKeys.current = {\n                browser: null,\n                maxIvCount: null,\n                ivCount: null,\n                unix: null,\n              };\n              throw Error;\n            }\n          } catch (e) {\n            if (\n              aesKeys.current.browser == null ||\n              aesKeys.current.unix == null ||\n              aesKeys.current.ivCount == null ||\n              aesKeys.current.maxIvCount == null\n            ) {\n              console.error(e);\n              console.error(data);\n              changeStatus(\"Failed to obtain encryption keys\");\n              return;\n            }\n          }\n        } else if (data.event === \"aes_key_rotation\") {\n          if (!aesKeys.current.unix) {\n            console.error(\"Cannot decrypt new AES keys\");\n            return;\n          }\n          try {\n            const newUnixAesKeyData = await aesDecrypt(\n              aesKeys.current.unix,\n              data.payload.b64_aes_secret_unix_key\n            );\n            const newBrowserAesKeyData = await aesDecrypt(\n              aesKeys.current.unix,\n              data.payload.b64_aes_secret_browser_key\n            );\n            aesKeys.current.browser = await getAESKey(newBrowserAesKeyData, [\n              \"encrypt\",\n            ]);\n            aesKeys.current.unix = await getAESKey(newUnixAesKeyData, [\n              \"decrypt\",\n            ]);\n            // toast.dark(\"AES keys have been rotated\");\n          } catch (e) {\n            console.error(e);\n            toast.dark(`AES key rotation failed: ${e}`);\n          }\n        } else if (data.event === \"error\") {\n          toast.dark(`Error: ${data.payload}`);\n          console.error(data);\n        } else {\n          toast.dark(`Unknown event received: ${data.event}`);\n          console.error(\"unknown event type\", data);\n        }\n      });\n    }\n    setupWebsocketConnection();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [terminalServerData, status]);\n\n  const showLandingPage =\n    [null, \"No Terminal provided\", \"Failed to fetch terminal data\"].indexOf(\n      status\n    ) > -1 || isStaticallyHosted === null;\n\n  const content = (\n    <div className=\"p-5 text-white flex-grow\">\n      {showLandingPage ? (\n        <LandingPageContent\n          isStaticallyHosted={isStaticallyHosted}\n          setCustomTermpairServer={setCustomTermpairServer}\n          setTerminalId={setTerminalId}\n        />\n      ) : (\n        <div\n          id=\"terminal\"\n          className={` p-3 bg-black flex-grow text-gray-400`}\n        ></div>\n      )}\n    </div>\n  );\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-col h-screen align-middle\">\n        <ToastContainer\n          position=\"bottom-right\"\n          limit={3}\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss={false}\n          draggable\n          pauseOnHover\n        />\n        <TopBar />\n        {content}\n        <BottomBar\n          terminalData={terminalServerData}\n          status={status}\n          terminalId={terminalId}\n          terminalSize={terminalSize}\n          numClients={numClients}\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\n// const instructions = [\n//   \"To broadcast a terminal, run\",\n//   \"\",\n//   `    ${pipxTermpairShareCommand}`,\n//   \"\",\n//   \"Then open or share the url printed to the terminal.\",\n//   \"\",\n//   \"To install pipx, see https://pipxproject.github.io/pipx/\",\n//   \"All terminal data is end-to-end encrypted 🔒.\",\n//   \"The termpair server and third parties can't read transmitted data.\",\n// ];\n\n// function writeInstructionsToXterm(xterm: Xterm) {\n//   instructions.forEach((line) => xterm.writeln(line));\n// }\n\n/**\n * The API to xterm.attachCustomKeyEventHandler is hardcoded. This function\n * provides a closure so that other variables can be used inside it.\n *\n * https://github.com/xtermjs/xterm.js/blob/70babeacb62fe05264d64324ca1f4436997efa1b/typings/xterm.d.ts#L538-L547\n *\n * @param {*} terminal - xterm object\n * @param {*} canType  - is user allowed to type (this is also enforced on the server)\n * @param {*} sendInputToTerminal - function to encode and send input over the websocket\n * @returns nothing\n */\nfunction getCustomKeyEventHandler(\n  terminal: Xterm,\n  canType: boolean | void,\n  sendInputToTerminal: (input: string) => void\n) {\n  /**\n   * Custom key event handler which is run before keys are\n   * processed, giving consumers of xterm.js ultimate control as to what keys\n   * should be processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns\n   * whether the event should be processed by xterm.js.\n   */\n  function customKeyEventHandler(e: KeyboardEvent): boolean {\n    if (e.type !== \"keydown\") {\n      return true;\n    }\n    if (e.ctrlKey && e.shiftKey) {\n      const key = e.key.toLowerCase();\n      if (key === \"v\") {\n        if (!canType) {\n          toastStatus(cannotTypeMsg);\n          return false;\n        }\n        navigator.clipboard.readText().then((toPaste) => {\n          sendInputToTerminal(toPaste);\n        });\n        return false;\n      } else if (key === \"c\" || key === \"x\") {\n        // 'x' is used as an alternate to 'c' because ctrl+c is taken\n        // by the terminal (SIGINT) and ctrl+shift+c is taken by the browser\n        // (open devtools).\n        // I'm not aware of ctrl+shift+x being used by anything in the terminal\n        // or browser\n        const toCopy = terminal.getSelection();\n        navigator.clipboard.writeText(toCopy);\n        terminal.focus();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return customKeyEventHandler;\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.0cb35f08.png\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// Symmetric encryption with aes gcm\n// https://github.com/mdn/dom-examples/blob/master/web-crypto/encrypt-decrypt/aes-gcm.js\n\nconst IV_LENGTH = 12;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey\nexport async function generateRSAKeyPair(): Promise<CryptoKeyPair> {\n  return window.crypto.subtle.generateKey(\n    {\n      name: \"RSA-OAEP\",\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\",\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n}\n\nexport async function decryptRSAMessage(\n  privateKey: CryptoKey,\n  ciphertext: Buffer\n): Promise<Buffer> {\n  return Buffer.from(\n    await window.crypto.subtle.decrypt(\n      {\n        name: \"RSA-OAEP\",\n      },\n      privateKey,\n      ciphertext\n    )\n  );\n}\nfunction ab2str(buf: ArrayBuffer): string {\n  // @ts-ignore\n  return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey#pkcs_8_export\nexport async function exportCryptoKey(key: CryptoKey) {\n  const exported = await window.crypto.subtle.exportKey(\"spki\", key);\n  const exportedAsString = ab2str(exported);\n  const exportedAsBase64 = window.btoa(exportedAsString);\n  const pemExported = `-----BEGIN PUBLIC KEY-----\\n${exportedAsBase64}\\n-----END PUBLIC KEY-----`;\n  return pemExported;\n}\n\nexport async function getAESKey(\n  rawKeyData: Buffer,\n  usages: Array<\"encrypt\" | \"decrypt\">\n): Promise<CryptoKey> {\n  return await window.crypto.subtle.importKey(\n    \"raw\",\n    rawKeyData,\n    {\n      name: \"AES-GCM\",\n    },\n    false, // extractable\n    usages\n  );\n}\n\nexport async function DEPRECATED_getSecretAESKey(): Promise<\n  Nullable<CryptoKey>\n> {\n  try {\n    const b64EncodedKey = window.location.hash.substring(\n      1, // skip the '#' symbol\n      window.location.hash.length - 1\n    );\n    if (!b64EncodedKey) {\n      return null;\n    }\n    const keyData = Buffer.from(b64EncodedKey, \"base64\");\n    console.log(\"good known raw data\", keyData);\n    return await window.crypto.subtle.importKey(\n      \"raw\",\n      keyData,\n      {\n        name: \"AES-GCM\",\n      },\n      false, // extractable\n      [\"encrypt\", \"decrypt\"]\n    );\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\nexport async function aesDecrypt(\n  unixSecretAESKey: CryptoKey,\n  encryptedPayloadB64: string\n): Promise<Buffer> {\n  // decode base64 data to unencrypted iv and encrypted data\n  const ivAndPayload = Buffer.from(encryptedPayloadB64, \"base64\");\n\n  // iv is prepended to encrypted payload\n  const iv = ivAndPayload.subarray(0, IV_LENGTH);\n\n  // remaining bytes are encrypted utf-8 output of terminal\n  const encryptedTerminalOutput = ivAndPayload.subarray(IV_LENGTH);\n\n  const decryptedTerminalOutput = Buffer.from(\n    await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      unixSecretAESKey,\n      encryptedTerminalOutput\n    )\n  );\n  return decryptedTerminalOutput;\n}\n\n// https://stackoverflow.com/a/65227338/2893090\nfunction ivFromInteger(ivCount: number) {\n  const iv = new Uint8Array(IV_LENGTH);\n  const a = [];\n  a.unshift(ivCount & 255);\n  // while some other byte still has data\n  while (ivCount >= 256) {\n    // shift 8 bits over (consume next byte)\n    ivCount = ivCount >>> 8;\n    // prepend current byte value to front of the array\n    a.unshift(ivCount & 255);\n  }\n  // set the 12 byte array with the array we just\n  // computed\n  iv.set(a);\n  return iv;\n}\n\nexport async function aesEncrypt(\n  browserSecretAESKey: CryptoKey,\n  utf8Payload: string,\n  ivCount: number\n) {\n  // The same iv must never be reused with a given key\n  const iv = ivFromInteger(ivCount);\n  const encryptedArrayBuffer = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    browserSecretAESKey,\n    new TextEncoder().encode(utf8Payload)\n  );\n  // prepend unencrypted iv to encrypted payload\n  const ivAndEncryptedPayload = _combineBuffers(iv, encryptedArrayBuffer);\n\n  const base64EncryptedString = _arrayBufferToBase64(ivAndEncryptedPayload);\n  return base64EncryptedString;\n}\n\nexport function isIvExhausted(ivCount: number, maxIvCount: number): boolean {\n  return ivCount >= maxIvCount;\n}\n\nfunction _combineBuffers(\n  buffer1: Uint8Array,\n  buffer2: ArrayBuffer\n): ArrayBufferLike {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction _arrayBufferToBase64(buffer: ArrayBuffer) {\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    // returns a utf-16 character, considered \"binary\"\n    binary += String.fromCharCode(bytes[i]);\n  }\n  // \"binary to ascii\"\n  return window.btoa(binary);\n}\n"],"sourceRoot":""}